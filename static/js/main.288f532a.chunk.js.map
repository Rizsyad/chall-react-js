{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Form","setTextTodo","getTextTodo","setTodo","getTodos","setStatus","setAnimateInsert","getAnimateInsert","insertIdLast","getLengthTask","setLengthTask","useBoolean","showAlert","closeAlert","useState","statusAlert","setStatusAlert","messageAlert","setMessageAlert","submitHandle","e","preventDefault","toggle","newData","id","Math","random","text","completed","date","Date","now","useEffect","setTimeout","status","mb","position","right","top","onClick","columns","spacing","size","value","pr","placeholder","onChange","target","onKeyUp","key","width","h","bg","color","icon","Todo","todo","getIdLast","getAnimateDelete","setAnimateDelete","mt","className","w","p","colorScheme","map","item","defaultIsChecked","as","filter","el","TodoList","getFilterTodos","mr","Navbar","useColorMode","colorMode","toggleColorMode","useColorModeValue","px","alignItems","justifyContent","direction","App","getStatus","setFilterTodos","getLocal","filterHandler","saveLocal","saveNotFinishTodo","sort","a","b","setFilterTodosFunction","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","notFinishedYet","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAoIeA,EArHF,SAAC,GAWP,IAVLC,EAUI,EAVJA,YACAC,EASI,EATJA,YACAC,EAQI,EARJA,QACAC,EAOI,EAPJA,SACAC,EAMI,EANJA,UACAC,EAKI,EALJA,iBACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,cACAC,EACI,EADJA,cAEA,EAAgCC,cAAhC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAUMC,EAAe,SAACC,GAGpB,GAFAA,EAAEC,kBACgB,IAAdT,GAAoBC,EAAWS,SACf,KAAhBpB,EACFc,EAAe,SACfE,EAAgB,mCACX,CACL,IAAMK,EAAU,CACdC,GAAoB,IAAhBC,KAAKC,SACTC,KAAMzB,EACN0B,WAAW,EACXC,KAAMC,KAAKC,OAGb5B,EAAQ,GAAD,mBAAKC,GAAL,CAAemB,KAEtBf,EAAae,EAAQC,IACrBlB,EAAiBgB,SACjBrB,EAAY,IACZe,EAAe,WACfE,EAAgB,0BAChBR,EAAcD,EAAgB,KAIlCuB,qBAAU,WACRC,YAAW,YACgB,IAArB1B,IACFD,EAAiBgB,SACjBd,EAAa,OAEd,QAaL,OACE,qCACGI,GACC,eAAC,IAAD,CAAOsB,OAAQnB,EAAaoB,GAAI,EAAhC,UACE,cAAC,IAAD,IACClB,EACD,cAAC,IAAD,CACEmB,SAAS,WACTC,MAAM,MACNC,IAAI,MACJC,QAhBe,WACvB1B,EAAWS,SACXN,EAAe,IACfE,EAAgB,UAiBd,eAAC,IAAD,CAAYsB,QAAS,EAAGC,QAAS,GAAIN,GAAI,GAAzC,UACE,eAAC,IAAD,CAAYO,KAAK,KAAjB,UACE,cAAC,IAAD,CACEC,MAAOzC,EACP0C,GAAG,SACHC,YAAY,kBACZC,SAxEc,SAAC1B,GACvBnB,EAAYmB,EAAE2B,OAAOJ,QAwEbK,QArEW,SAAC5B,GACN,UAAVA,EAAE6B,KAAiB9B,EAAaC,MAsE9B,cAAC,IAAD,CAAmB8B,MAAM,SAAzB,SACE,cAAC,IAAD,CACEC,EAAE,UACFT,KAAK,KACLH,QAASpB,EACTiC,GAAG,WACHC,MAAM,QALR,oBAWJ,eAAC,IAAD,CACEC,KAAM,cAAC,IAAD,IACNT,YAAY,mBACZC,SAhDa,SAAC1B,GACpBf,EAAUe,EAAE2B,OAAOJ,QA4Cf,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,cAAd,mC,wBC/CKY,EAjEF,SAAC,GAUP,IATLC,EASI,EATJA,KACA7B,EAQI,EARJA,KACAC,EAOI,EAPJA,UACAxB,EAMI,EANJA,SACAD,EAKI,EALJA,QACAI,EAII,EAJJA,iBACAkD,EAGI,EAHJA,UACAhD,EAEI,EAFJA,cACAC,EACI,EADJA,cAEA,EAA6CC,cAA7C,mBAAO+C,EAAP,KAAyBC,EAAzB,KAUA3B,qBAAU,WACJ0B,GAAkBC,EAAiBrC,WACtC,IAeH,OACE,cAAC,IAAD,CACEsC,GAAI,EACJzB,GAAI,EACJ0B,UAAS,UACPtD,GAAoBiD,EAAKhC,KAAOiC,EAC5B,wCACA,GAHG,YAILC,EAAmB,0CAA4C,IAPrE,SASE,cAAC,IAAD,CAAKN,GAAIxB,EAAY,QAAU,SAAUkC,EAAE,OAAOC,EAAG,EAAGV,MAAM,QAA9D,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEW,YAAY,QACZlB,SA3Bc,WACtBpC,EAAcD,EAAgB,GAC9BN,EACEC,EAAS6D,KAAI,SAACC,GACZ,OAAIA,EAAK1C,KAAOgC,EAAKhC,GAAW0C,EACzB,2BACFA,GADL,IAEEtC,WAAYsC,EAAKtC,iBAqBfuC,iBAAkBvC,EAHpB,SAKGA,EAAY,cAAC,IAAD,CAAMwC,GAAG,MAAT,SAAgBzC,IAAe,cAAC,IAAD,UAAOA,MAErD,cAAC,IAAD,IACA,cAAC,IAAD,CAAYiC,GAAI,EAAGrB,QA7CN,YACI,IAAnBiB,EAAK5B,WAAqBlB,EAAcD,EAAgB,GAC5DkD,EAAiBrC,SACjBW,YAAW,WACT9B,EAAQC,EAASiE,QAAO,SAACC,GAAD,OAAQA,EAAG9C,KAAOgC,EAAKhC,SAC9C,gB,QCiBQ+C,EA5CE,SAAC,GAQX,IAPLpE,EAOI,EAPJA,QACAC,EAMI,EANJA,SACAoE,EAKI,EALJA,eACAjE,EAII,EAJJA,iBACAkD,EAGI,EAHJA,UACAhD,EAEI,EAFJA,cACAC,EACI,EADJA,cAEA,OACE,qCACGD,EAAgB,EAAhB,mBACaA,EADb,iBAGC,cAAC,IAAD,UACE,cAAC,IAAD,CAAK2C,GAAG,UAAUU,EAAE,OAAOC,EAAG,EAAGV,MAAM,QAAvC,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAQoB,GAAI,EAAZ,SACE,cAAC,IAAD,MAFJ,wDAULD,EAAeP,KAAI,SAACT,GAAD,OAClB,cAAC,EAAD,CAEEA,KAAMA,EACNpD,SAAUA,EACVuB,KAAM6B,EAAK7B,KACXC,UAAW4B,EAAK5B,UAChBzB,QAASA,EACTI,iBAAkBA,EAClBkD,UAAWA,EACXhD,cAAeA,EACfC,cAAeA,GATV8C,EAAKhC,W,QCDLkD,EArBA,WACb,MAAuCC,cAA/BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,gBAEnB,OACE,mCACE,cAAC,IAAD,CAAKzB,GAAI0B,YAAkB,WAAY,YAAaC,GAAI,EAAxD,SACE,eAAC,IAAD,CAAM5B,EAAG,GAAI6B,WAAY,SAAUC,eAAgB,gBAAnD,UACE,cAAC,IAAD,+BACA,cAAC,IAAD,CAAMD,WAAY,SAAlB,SACE,cAAC,IAAD,CAAOE,UAAW,MAAOzC,QAAS,EAAlC,SACE,cAAC,IAAD,CAAQF,QAASsC,EAAjB,SACiB,UAAdD,EAAwB,cAAC,IAAD,IAAe,cAAC,IAAD,kBC2EzCO,EA1FH,WACV,MAAmCrE,mBAAS,IAA5C,mBAAOZ,EAAP,KAAoBD,EAApB,KACA,EAAkCa,mBAAS,IAA3C,mBAAO2C,EAAP,KAAkBjD,EAAlB,KACA,EAA4BM,mBAAS,IAArC,mBAAOV,EAAP,KAAiBD,EAAjB,KACA,EAA+BW,mBAAS,OAAxC,mBAAOsE,EAAP,KAAkB/E,EAAlB,KACA,EAAyCS,mBAAS,IAAlD,mBAAO0D,EAAP,KAAuBa,EAAvB,KACA,EAA6C1E,cAA7C,mBAAOJ,EAAP,KAAyBD,EAAzB,KACA,EAAuCQ,mBAAS,GAAhD,mBAAOL,EAAP,KAAsBC,EAAtB,KAGAsB,qBAAU,WACRsD,MACC,IAEHtD,qBAAU,WACRuD,IACAC,IACAC,MACC,CAACrF,EAASsF,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE/D,KAAO8D,EAAE9D,QAAOuD,IAE9C,IAAMS,EAAyB,SAACjE,GAC9ByD,EAAejF,EAASiE,QAAO,SAACH,GAAD,OAAUA,EAAKtC,YAAcA,OAGxD2D,EAAgB,WACpB,OAAQH,GACN,IAAK,YACHS,GAAuB,GACvB,MACF,IAAK,cACHA,GAAuB,GACvB,MACF,QACER,EAAejF,KAKfoF,EAAY,WAChBM,aAAaC,QAAQ,WAAYC,KAAKC,UAAU7F,KAG5CkF,EAAW,WACf,GAAyC,OAArCQ,aAAaI,QAAQ,YAAsB,CAC7C,IAAIC,EAAYH,KAAKI,MAAMN,aAAaI,QAAQ,aAChD/F,EAAQgG,KAINV,EAAoB,WACxB,IAAMY,EAAiBjG,EAASiE,QAAO,SAACC,GAAD,OAAyB,IAAjBA,EAAG1C,aAClDlB,EAAc2F,EAAeC,SAG/B,OACE,qCACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAQnE,GAAI,EAAGyB,GAAI,GAAnB,SACE,cAAC,IAAD,CAASQ,GAAG,KAAK1B,KAAK,MAAtB,iCAIF,cAAC,EAAD,CACExC,YAAaA,EACbD,YAAaA,EACbG,SAAUA,EACVD,QAASA,EACTE,UAAWA,EACXkF,cAAeA,EACfhF,iBAAkBA,EAClBD,iBAAkBA,EAClBE,aAAcA,EACdC,cAAeA,EACfC,cAAeA,IAEjB,cAAC,EAAD,CACE8D,eAAgBA,EAChBrE,QAASA,EACTC,SAAUA,EACVG,iBAAkBA,EAClBkD,UAAWA,EACXhD,cAAeA,EACfC,cAAeA,WC7EV6F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.288f532a.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport {\n  Input,\n  InputGroup,\n  InputRightElement,\n  Button,\n  SimpleGrid,\n  Select,\n  useBoolean,\n  Alert,\n  AlertIcon,\n  CloseButton,\n} from \"@chakra-ui/react\";\nimport { MdArrowDropDown } from \"react-icons/md\";\n\nconst Form = ({\n  setTextTodo,\n  getTextTodo,\n  setTodo,\n  getTodos,\n  setStatus,\n  setAnimateInsert,\n  getAnimateInsert,\n  insertIdLast,\n  getLengthTask,\n  setLengthTask,\n}) => {\n  const [showAlert, closeAlert] = useBoolean();\n  const [statusAlert, setStatusAlert] = useState(\"\");\n  const [messageAlert, setMessageAlert] = useState(\"\");\n\n  const inputTextHandle = (e) => {\n    setTextTodo(e.target.value);\n  };\n\n  const keyUpHandler = (e) => {\n    if (e.key === \"Enter\") submitHandle(e);\n  };\n\n  const submitHandle = (e) => {\n    e.preventDefault();\n    if (showAlert !== true) closeAlert.toggle();\n    if (getTextTodo === \"\") {\n      setStatusAlert(\"error\");\n      setMessageAlert(\"Inputan tidak boleh kosong!\");\n    } else {\n      const newData = {\n        id: Math.random() * 1000,\n        text: getTextTodo,\n        completed: false,\n        date: Date.now(),\n      };\n\n      setTodo([...getTodos, newData]);\n\n      insertIdLast(newData.id);\n      setAnimateInsert.toggle();\n      setTextTodo(\"\");\n      setStatusAlert(\"success\");\n      setMessageAlert(\"Todo telah ditambahkan\");\n      setLengthTask(getLengthTask + 1);\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (getAnimateInsert === true) {\n        setAnimateInsert.toggle();\n        insertIdLast(\"\");\n      }\n    }, 1000);\n  });\n\n  const statusHandle = (e) => {\n    setStatus(e.target.value);\n  };\n\n  const closeAlertHandle = () => {\n    closeAlert.toggle();\n    setStatusAlert(\"\");\n    setMessageAlert(\"\");\n  };\n\n  return (\n    <>\n      {showAlert && (\n        <Alert status={statusAlert} mb={4}>\n          <AlertIcon />\n          {messageAlert}\n          <CloseButton\n            position=\"absolute\"\n            right=\"8px\"\n            top=\"8px\"\n            onClick={closeAlertHandle}\n          />\n        </Alert>\n      )}\n      <SimpleGrid columns={2} spacing={10} mb={10}>\n        <InputGroup size=\"md\">\n          <Input\n            value={getTextTodo}\n            pr=\"4.5rem\"\n            placeholder=\"Enter Todo List\"\n            onChange={inputTextHandle}\n            onKeyUp={keyUpHandler}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button\n              h=\"1.75rem\"\n              size=\"sm\"\n              onClick={submitHandle}\n              bg=\"teal.400\"\n              color=\"white\"\n            >\n              +\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n        <Select\n          icon={<MdArrowDropDown />}\n          placeholder=\"Filter Todo List\"\n          onChange={statusHandle}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </Select>\n      </SimpleGrid>\n    </>\n  );\n};\n\nexport default Form;\n","// import React from \"react\";\nimport { useEffect } from \"react\";\nimport { DeleteIcon } from \"@chakra-ui/icons\";\nimport {\n  VStack,\n  Flex,\n  Text,\n  Box,\n  Spacer,\n  useBoolean,\n  Checkbox,\n} from \"@chakra-ui/react\";\n\nconst Todo = ({\n  todo,\n  text,\n  completed,\n  getTodos,\n  setTodo,\n  getAnimateInsert,\n  getIdLast,\n  getLengthTask,\n  setLengthTask,\n}) => {\n  const [getAnimateDelete, setAnimateDelete] = useBoolean();\n\n  const removeHandle = () => {\n    if (todo.completed === false) setLengthTask(getLengthTask - 1);\n    setAnimateDelete.toggle();\n    setTimeout(() => {\n      setTodo(getTodos.filter((el) => el.id !== todo.id));\n    }, 1000);\n  };\n\n  useEffect(() => {\n    if (getAnimateDelete) setAnimateDelete.toggle();\n  }, []);\n\n  const completedHandle = () => {\n    setLengthTask(getLengthTask - 1);\n    setTodo(\n      getTodos.map((item) => {\n        if (item.id !== todo.id) return item;\n        return {\n          ...item,\n          completed: !item.completed,\n        };\n      })\n    );\n  };\n\n  return (\n    <VStack\n      mt={3}\n      mb={3}\n      className={`${\n        getAnimateInsert && todo.id === getIdLast\n          ? \"animate__animated animate__fadeInDown\"\n          : \"\"\n      } ${getAnimateDelete ? \"animate__animated animate__fadeOutRight\" : \"\"}`}\n    >\n      <Box bg={completed ? \"green\" : \"tomato\"} w=\"100%\" p={4} color=\"white\">\n        <Flex>\n          <Checkbox\n            colorScheme=\"green\"\n            onChange={completedHandle}\n            defaultIsChecked={completed}\n          >\n            {completed ? <Text as=\"del\">{text}</Text> : <Text>{text}</Text>}\n          </Checkbox>\n          <Spacer />\n          <DeleteIcon mt={1} onClick={removeHandle} />\n        </Flex>\n      </Box>\n    </VStack>\n  );\n};\n\nexport default Todo;\n","import Todo from \"./Todo\";\nimport { Box, Flex, HStack, Center } from \"@chakra-ui/react\";\nimport { HiOutlineEmojiSad } from \"react-icons/hi\";\n\nconst TodoList = ({\n  setTodo,\n  getTodos,\n  getFilterTodos,\n  getAnimateInsert,\n  getIdLast,\n  getLengthTask,\n  setLengthTask,\n}) => {\n  return (\n    <>\n      {getLengthTask > 0 ? (\n        `You have ${getLengthTask} pending task`\n      ) : (\n        <HStack>\n          <Box bg=\"red.600\" w=\"100%\" p={4} color=\"white\">\n            <Flex>\n              <Center mr={1}>\n                <HiOutlineEmojiSad />\n              </Center>\n              Sorry, the to-do list has not been created yet\n            </Flex>\n          </Box>\n        </HStack>\n      )}\n\n      {getFilterTodos.map((todo) => (\n        <Todo\n          key={todo.id}\n          todo={todo}\n          getTodos={getTodos}\n          text={todo.text}\n          completed={todo.completed}\n          setTodo={setTodo}\n          getAnimateInsert={getAnimateInsert}\n          getIdLast={getIdLast}\n          getLengthTask={getLengthTask}\n          setLengthTask={setLengthTask}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default TodoList;\n","import {\n  Box,\n  Flex,\n  Button,\n  useColorModeValue,\n  Stack,\n  useColorMode,\n} from \"@chakra-ui/react\";\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\n\nconst Navbar = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  return (\n    <>\n      <Box bg={useColorModeValue(\"gray.100\", \"gray.900\")} px={4}>\n        <Flex h={16} alignItems={\"center\"} justifyContent={\"space-between\"}>\n          <Box>Simple React App</Box>\n          <Flex alignItems={\"center\"}>\n            <Stack direction={\"row\"} spacing={7}>\n              <Button onClick={toggleColorMode}>\n                {colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\n              </Button>\n            </Stack>\n          </Flex>\n        </Flex>\n      </Box>\n    </>\n  );\n};\n\nexport default Navbar;\n","import { Container, Center, Heading, useBoolean } from \"@chakra-ui/react\";\nimport { useState, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\nimport Navbar from \"./components/Navbar\";\n\nconst App = () => {\n  const [getTextTodo, setTextTodo] = useState(\"\");\n  const [getIdLast, insertIdLast] = useState(\"\");\n  const [getTodos, setTodo] = useState([]);\n  const [getStatus, setStatus] = useState(\"all\");\n  const [getFilterTodos, setFilterTodos] = useState([]);\n  const [getAnimateInsert, setAnimateInsert] = useBoolean();\n  const [getLengthTask, setLengthTask] = useState(0);\n\n  // useEffect\n  useEffect(() => {\n    getLocal();\n  }, []);\n\n  useEffect(() => {\n    filterHandler();\n    saveLocal();\n    saveNotFinishTodo();\n  }, [getTodos.sort((a, b) => b.date - a.date), getStatus]);\n\n  const setFilterTodosFunction = (completed) => {\n    setFilterTodos(getTodos.filter((item) => item.completed === completed));\n  };\n\n  const filterHandler = () => {\n    switch (getStatus) {\n      case \"completed\":\n        setFilterTodosFunction(true);\n        break;\n      case \"uncompleted\":\n        setFilterTodosFunction(false);\n        break;\n      default:\n        setFilterTodos(getTodos);\n        break;\n    }\n  };\n\n  const saveLocal = () => {\n    localStorage.setItem(\"getTodos\", JSON.stringify(getTodos));\n  };\n\n  const getLocal = () => {\n    if (localStorage.getItem(\"getTodos\") !== null) {\n      let todoLocal = JSON.parse(localStorage.getItem(\"getTodos\"));\n      setTodo(todoLocal);\n    }\n  };\n\n  const saveNotFinishTodo = () => {\n    const notFinishedYet = getTodos.filter((el) => el.completed === false);\n    setLengthTask(notFinishedYet.length);\n  };\n\n  return (\n    <>\n      <Navbar />\n      <Container>\n        <Center mb={8} mt={10}>\n          <Heading as=\"h2\" size=\"2xl\">\n            Project Todo List\n          </Heading>\n        </Center>\n        <Form\n          getTextTodo={getTextTodo}\n          setTextTodo={setTextTodo}\n          getTodos={getTodos}\n          setTodo={setTodo}\n          setStatus={setStatus}\n          filterHandler={filterHandler}\n          getAnimateInsert={getAnimateInsert}\n          setAnimateInsert={setAnimateInsert}\n          insertIdLast={insertIdLast}\n          getLengthTask={getLengthTask}\n          setLengthTask={setLengthTask}\n        />\n        <TodoList\n          getFilterTodos={getFilterTodos}\n          setTodo={setTodo}\n          getTodos={getTodos}\n          getAnimateInsert={getAnimateInsert}\n          getIdLast={getIdLast}\n          getLengthTask={getLengthTask}\n          setLengthTask={setLengthTask}\n        />\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport \"animate.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}